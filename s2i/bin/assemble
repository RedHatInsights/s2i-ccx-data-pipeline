#!/bin/bash

function virtualenv_bin() {
  if head "/etc/redhat-release" | grep -q "^CentOS Linux release 7" || \
     head "/etc/redhat-release" | grep -q "^Red Hat Enterprise Linux\( Server\)\? release 7" || \
     head "/etc/redhat-release" | grep -q "^Fedora release"; then
    virtualenv $1
  else
    virtualenv-${PYTHON_VERSION} $1
  fi
}

# Install pipenv or micropipenv to the separate virtualenv to isolate it
# from system Python packages and packages in the main
# virtualenv. Executable is simlinked into ~/.local/bin
# to be accessible. This approach is inspired by pipsi
# (pip script installer).
function install_tool() {
  echo "---> Installing $1 packaging tool ..."
  VENV_DIR=$HOME/.local/venvs/$1
  virtualenv_bin "$VENV_DIR"
  $VENV_DIR/bin/pip --isolated install -U $1$2  # Combines package name with [extras] if [extras] is defined as $2
  mkdir -p $HOME/.local/bin
  ln -s $VENV_DIR/bin/$1 $HOME/.local/bin/$1
}

set -e

shopt -s dotglob
echo "---> Installing application source ..."
mv /tmp/src/* "$HOME"

# set permissions for any installed artifacts
fix-permissions /opt/app-root -P

if [[ ! -z "$UPGRADE_PIP_TO_LATEST" ]]; then
  echo "---> Upgrading pip to latest version ..."
  pip install -U pip setuptools wheel
fi

if [[ ! -z "$GIT_ASKPASS" && ! -z "$GITHUB_API_TOKEN" ]]; then
  echo "---> Creating GIT_ASKPASS script ..."
  echo "echo $GITHUB_API_TOKEN" > $GIT_ASKPASS
  chmod +x $GIT_ASKPASS
fi

if [[ -f requirements.txt ]]; then
  echo "---> Installing dependencies ..."
  pip install $PIP_INSTALL_OPTS -r requirements.txt
fi

if [[ -f setup.py && -z "$DISABLE_SETUP_PY_PROCESSING" ]]; then
  echo "---> Installing application ..."
  pip install $PIP_INSTALL_OPTS .
fi

# set permissions for any installed artifacts
fix-permissions /opt/app-root -P
